package hdfs.replicationsimulator;

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class AllDatanode {

	private List<Datanode> datanodes;
	private boolean isRunning = false;
	private Queue<Event> toNamenode;

	private Queue<Event> toDatanodes;

	public Daemon hbthread = null; // Heartbeatsender thread
	public Daemon commandsthread = null; // commands thread

	// Duplicated in NameNode TODO
	private int HEARTBEAT_ACTION = 1;

	private int heartbeatInterval = 2000;// in ms
<<<<<<< .mine
	private int bandwidth = 20000;// in B
	private int blockSize = 64000;// in B

=======
	private int bandwidth		   = 20000;//in b/s
	private int blockSize			= 64000;//in B
	
>>>>>>> .r36
	private long transferTime;

	// Lock for accessing the namenode command list
	private Object namenodeLock = new Object();

	// Lock for accessing the datanode command list
	private Object datanodeLock = new Object();

	private Queue<Event> pendingTransfers;
	boolean checkingPending = false;

	public AllDatanode() {

		datanodes = new ArrayList<Datanode>();
		toNamenode = Simulator.getToNamenode();
		toDatanodes = Simulator.getToDatanodes();

		this.hbthread = new Daemon(new HeartbeatSender());
		this.commandsthread = new Daemon(new CommandsHandler());

		this.bandwidth = Simulator.getBandwidth();

		this.transferTime = (blockSize * 8 * 1000) / this.bandwidth;

		pendingTransfers = new ConcurrentLinkedQueue<Event>();
	}

	void addNode(Datanode datanode) {
		datanodes.add(datanode);
	}

	Datanode getNode(int id) {
		return datanodes.get(id);
	}

	int datanodeListSize() {
		return datanodes.size();
	}

	public boolean addToNamenodeQueue(Event e) {
		synchronized (namenodeLock) {
			// System.out.println("adding heartbeat to namenode...");
			boolean result = toNamenode.add(e);
			// System.out.println("added heartbeat to namenode.");
			return result;
		}
	}

	public boolean addToDatanodeQueue(Event e) {
		synchronized (datanodeLock) {
			// System.out.println("adding heartbeat to namenode...");
			boolean result = toNamenode.add(e);
			// System.out.println("added heartbeat to namenode.");
			return result;
		}
	}

	/**
	 * Starts the datanodes management thread
	 */
	public void start() {
		isRunning = true;
		hbthread.start();
		commandsthread.start();
	}

	/**
	 * Stops the datanodes management thread
	 */
	public void stop() {
		isRunning = false;

		try {
			hbthread.join();
			commandsthread.join();

		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Send the heartbeats.
	 */
	class HeartbeatSender implements Runnable {

		public void run() {
			while (isRunning) {
				try {
					checkHearbeat();
				} catch (Exception e) {
					// FSNamesystem.LOG.error(StringUtils.stringifyException(e));
				}
			}
		}

		private void checkHearbeat() {
			Datanode current;
			for (int i = 0; i < datanodes.size(); i++) {
				current = datanodes.get(i);
				if (!current.hasFailed()
						&& (Node.now() >= heartbeatInterval
								+ current.getLastHB())) {
					sendHeartbeat(i);
					// System.out.print("HB from " + current.getId() + "\n");
					current.setLastHB(Node.now());
				}
			}
		}
	}

	public boolean sendHeartbeat(int id) {
		return addToNamenodeQueue(new Event(id, HEARTBEAT_ACTION, Node.now()));
	}

	/**
	 * Process the commands received from NameNode
	 */
	class CommandsHandler implements Runnable {

		public void run() {
			while (isRunning) {
				try {
					handleCommands();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		private void handleCommands() {
			Event command = toDatanodes.poll();

			if (command != null) {
				// Handle it
				if (command.getAction() == Event.REPLICATION) {
					if (!handleTransfer(command.getSource(),
							command.getDestination(), command.getBlockId())) {
						toDatanodes.add(command);
					}
				}
			}
		}

		public boolean handleTransfer(int idSource, int idDestination,
				int idBlock) {
			Datanode sourceNode = null;
			Datanode destinationNode = null;

			while (datanodes.iterator().hasNext()) {
				Datanode node = datanodes.iterator().next();
				if (node.getId() == idSource) {
					sourceNode = node;
				} else if (node.getId() == idDestination) {
					destinationNode = node;
				}
			}

			boolean ableToTransfer = (Node.now() > sourceNode
					.getUploadingTime())
					&& (Node.now() > destinationNode.getDownloadingTime());

			if ((sourceNode != null) && (destinationNode != null)
					&& ableToTransfer) {
				long time = Node.now() + transferTime;
				sourceNode.setUploadingTime(time);
				destinationNode.setDownloadingTime(time);
				
				destinationNode.setPendingBlock(idBlock);
				return true;
			} else if (!ableToTransfer) {
				return false;
			}
			return false;
		}
	}

}
